function BER = runPR_QAM_Rx(rx_param)

%   Copyright 2017 The MathWorks, Inc.

% persistent rx radio;
% if isempty(rx)
%     rx  = QPSKReceiver(...
%         'ModulationOrder',                      rx_param.ModulationOrder, ...
%         'SampleRate',                           rx_param.Fs, ...
%         'DecimationFactor',                     rx_param.Decimation, ...
%         'FrameSize',                            rx_param.FrameSize, ...
%         'HeaderLength',                         rx_param.HeaderLength, ...
%         'NumberOfMessage',                      rx_param.NumberOfMessage, ...
%         'PayloadLength',                        rx_param.PayloadLength, ...
%         'DesiredPower',                         rx_param.DesiredPower, ...
%         'AveragingLength',                      rx_param.AveragingLength, ...
%         'MaxPowerGain',                         rx_param.MaxPowerGain, ...
%         'RolloffFactor',                        rx_param.RolloffFactor, ...
%         'RaisedCosineFilterSpan',               rx_param.RaisedCosineFilterSpan, ...
%         'InputSamplesPerSymbol',                rx_param.Interpolation, ...
%         'MaximumFrequencyOffset',               rx_param.MaximumFrequencyOffset, ...
%         'PostFilterOversampling',               rx_param.Interpolation/rx_param.Decimation, ...
%         'PhaseRecoveryLoopBandwidth',           rx_param.PhaseRecoveryLoopBandwidth, ...
%         'PhaseRecoveryDampingFactor',           rx_param.PhaseRecoveryDampingFactor, ...
%         'TimingRecoveryDampingFactor',          rx_param.TimingRecoveryDampingFactor, ...
%         'TimingRecoveryLoopBandwidth',          rx_param.TimingRecoveryLoopBandwidth, ...
%         'TimingErrorDetectorGain',              rx_param.TimingErrorDetectorGain, ...
%         'PreambleDetectorThreshold',            rx_param.PreambleDetectorThreshold, ...
%         'DescramblerBase',                      rx_param.ScramblerBase, ...
%         'DescramblerPolynomial',                rx_param.ScramblerPolynomial, ...
%         'DescramblerInitialConditions',         rx_param.ScramblerInitialConditions,...
%         'BerMask',                              rx_param.BerMask, ...
%         'PrintOption',                          printData);
%     
%     % Create and configure the Pluto System object.
%     radio = sdrrx('Pluto');
%     radio.RadioID               = rx_param.Address;
%     radio.CenterFrequency       = rx_param.PlutoCenterFrequency;
%     radio.BasebandSampleRate    = rx_param.PlutoFrontEndSampleRate;
%     radio.SamplesPerFrame       = rx_param.PlutoFrameLength;
%     radio.GainSource            = 'Manual';
%     radio.Gain                  = rx_param.PlutoGain;
%     radio.OutputDataType        = 'double';
% end

rx = QAMReceiver(rx_param);

radio = sdrtx('Pluto'); % => see matlab help for sdrrx
radio.RadioID               = rx_param.Address;
radio.CenterFrequency       = rx_param.PlutoCenterFrequency;
% => Receiver sample rate can be more than tx (symbolrate * Interpolation) e.g. (symbolrate * Tx_Interpolation * 2)
% e.g. tx_interpolation = 3, rx_interpolation = 7
radio.BasebandSampleRate    = rx_param.PlutoFrontEndSampleRate;
% FrameLength -> time of frame * sample rate
radio.SamplesPerFrame       = rx_param.PlutoFrameLength;
radio.Gain                  = rx_param.PlutoGain;

% Initialize variables
currentTime = 0;
BER = [];
rcvdSignal = complex(zeros(rx_param.PlutoFrameLength,1));

while currentTime <  rx_param.StopTime
    % Receive signal from the radio
    rcvdSignal = radio();
    
    % Decode the received message
    [~, ~, ~, BER] = rx(rcvdSignal);
    
    % Update simulation time
    currentTime=currentTime+(radio.SamplesPerFrame / radio.BasebandSampleRate);
end

release(rx);
release(radio);
