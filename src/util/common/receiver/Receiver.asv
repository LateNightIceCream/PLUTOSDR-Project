classdef Receiver < RadioBase
    %% Receiver object for adalm Pluto
    
    properties (Constant)
    end
    
    properties (GetAccess=public, SetAccess=private)
    end
    
    properties (Dependent)
    end
    
    properties (Access=private)
    end
    
    methods
        %% Class constructor
        function obj = Receiver()
            obj.PlutoGain = 20;
        end
        
        
        %% Initialize the Pluto Radio Object
        function init_radio(obj, pluto_address)
            if ~isempty(obj.Radio)
                release(obj.Radio);
            end
            
            obj.PlutoAddress = pluto_address;
            
            num_samples = 1024 * 1024;
            
            obj.Radio = sdrrx('Pluto', ...
                              'RadioID', obj.PlutoAddress, ...
                              'CenterFrequency', obj.CenterFrequency, ...
                              'BasebandSampleRate', obj.Fs, ...
                              'SamplesPerFrame', num_samples, ...
                              'OutputDataType', 'double', ...
                              'ShowAdvancedProperties', true, ...
                              'GainSource', 'manual', ...
                              'Gain', obj.PlutoGain);
        end
        
        
        %% Receive frequency offset and calibrate
        function receive_frequency_offset(obj, duration_sec)
            if isempty(obj.Radio)
                error("Radio object not initialized. Call init_radio(...) first.");
            end
            
            % Set up the receiver
            % Use the default value of 0 for FrequencyCorrection, which corresponds to
            % the factory-calibrated condition
            sampleRate = SP.PlutoFrontEndSampleRate;
            centerFreq = obj.CenterFrequency;
            numSamples = obj.Radio.SamplesPerFrame;

            fRef = 80e3;

            
            % Use the info method to show the actual values of various hardware-related
            % properties
            info(rx)

            %% Receive and Visualize Signal

            disp(['Capture signal and observe the frequency offset' newline])
            % recording!
            receivedSig = rx(); 
            %save("rx_signal_1", receivedSig)

            % Find the tone that corresponds to the 80 kHz transmitted tone
            y = fftshift(abs(fft(receivedSig)));
            [~, idx] = findpeaks(y,'MinPeakProminence',max(0.5*y));
            fReceived = (max(idx)-numSamples/2-1)/numSamples*sampleRate; % get the actual frequency of the peak

            % Plot the spectrum
            sa = dsp.SpectrumAnalyzer('SampleRate', sampleRate, 'SpectralAverages', 4);
            sa.Title = sprintf('Tone Expected at 80 kHz, Actually Received at %.3f kHz', ...
                               fReceived/1000);
            receivedSig = reshape(receivedSig, [], 16); % Reshape into 16 columns
            for i = 1:size(receivedSig, 2)
                sa(receivedSig(:,i));
            end

            %% Estimate and Apply the Value of FrequencyCorrection

            rx.FrequencyCorrection = (fReceived - fRef) / (centerFreq + fRef) * 1e6;
            msg = sprintf(['Based on the tone detected at %.3f kHz, ' ...
                           'FrequencyCorrection of the receiver should be set to %.4f'], ...
                           fReceived/1000, rx.FrequencyCorrection);
            disp(msg);
            info(rx)

            
        end
        
        
        %% Setters
        
        
        %% Getters
     
        
    end
    
    
    methods (Access=private)
    end
    
end