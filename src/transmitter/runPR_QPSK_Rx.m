function BER = runPR_QPSK_Rx(SP_Rx, printData)

%   Copyright 2017 The MathWorks, Inc.

persistent rx radio;
if isempty(rx)
    rx  = QPSKReceiver(...
        'ModulationOrder',                      SP_Rx.ModulationOrder, ...
        'SampleRate',                           SP_Rx.Fs, ...
        'DecimationFactor',                     SP_Rx.Decimation, ...
        'FrameSize',                            SP_Rx.FrameSize, ...
        'HeaderLength',                         SP_Rx.HeaderLength, ...
        'NumberOfMessage',                      SP_Rx.NumberOfMessage, ...
        'PayloadLength',                        SP_Rx.PayloadLength, ...
        'DesiredPower',                         SP_Rx.DesiredPower, ...
        'AveragingLength',                      SP_Rx.AveragingLength, ...
        'MaxPowerGain',                         SP_Rx.MaxPowerGain, ...
        'RolloffFactor',                        SP_Rx.RolloffFactor, ...
        'RaisedCosineFilterSpan',               SP_Rx.RaisedCosineFilterSpan, ...
        'InputSamplesPerSymbol',                SP_Rx.Interpolation, ...
        'MaximumFrequencyOffset',               SP_Rx.MaximumFrequencyOffset, ...
        'PostFilterOversampling',               SP_Rx.Interpolation/SP_Rx.Decimation, ...
        'PhaseRecoveryLoopBandwidth',           SP_Rx.PhaseRecoveryLoopBandwidth, ...
        'PhaseRecoveryDampingFactor',           SP_Rx.PhaseRecoveryDampingFactor, ...
        'TimingRecoveryDampingFactor',          SP_Rx.TimingRecoveryDampingFactor, ...
        'TimingRecoveryLoopBandwidth',          SP_Rx.TimingRecoveryLoopBandwidth, ...
        'TimingErrorDetectorGain',              SP_Rx.TimingErrorDetectorGain, ...
        'PreambleDetectorThreshold',            SP_Rx.PreambleDetectorThreshold, ...
        'DescramblerBase',                      SP_Rx.ScramblerBase, ...
        'DescramblerPolynomial',                SP_Rx.ScramblerPolynomial, ...
        'DescramblerInitialConditions',         SP_Rx.ScramblerInitialConditions,...
        'BerMask',                              SP_Rx.BerMask, ...
        'PrintOption',                          printData);
    
    % Create and configure the Pluto System object.
    radio = sdrrx('Pluto');
    radio.RadioID               = SP_Rx.Address;
    radio.CenterFrequency       = SP_Rx.PlutoCenterFrequency;
    radio.BasebandSampleRate    = SP_Rx.PlutoFrontEndSampleRate;
    radio.SamplesPerFrame       = SP_Rx.PlutoFrameLength;
    radio.GainSource            = 'Manual';
    radio.Gain                  = SP_Rx.PlutoGain;
    radio.OutputDataType        = 'double';
end

% Initialize variables
currentTime = 0;
BER = [];
rcvdSignal = complex(zeros(SP_Rx.PlutoFrameLength,1));

while currentTime <  SP_Rx.StopTime
    % Receive signal from the radio
    rcvdSignal = radio();
    
    % Decode the received message
    [~, ~, ~, BER] = rx(rcvdSignal);
    
    % Update simulation time
    currentTime=currentTime+(radio.SamplesPerFrame / radio.BasebandSampleRate);
end

release(rx);
release(radio);
